// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bfs_bfs_Pipeline_loop_neighbors (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cnt,
        tmp_begin,
        tmp_end,
        edges_0_address0,
        edges_0_ce0,
        edges_0_q0,
        edges_0_address1,
        edges_0_ce1,
        edges_0_q1,
        edges_1_address0,
        edges_1_ce0,
        edges_1_q0,
        edges_1_address1,
        edges_1_ce1,
        edges_1_q1,
        level_address0,
        level_ce0,
        level_we0,
        level_d0,
        level_q0,
        empty,
        cnt_1_0_out,
        cnt_1_0_out_ap_vld,
        cnt_2_0_out,
        cnt_2_0_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_state7 = 7'd32;
parameter    ap_ST_fsm_state8 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] cnt;
input  [63:0] tmp_begin;
input  [63:0] tmp_end;
output  [10:0] edges_0_address0;
output   edges_0_ce0;
input  [63:0] edges_0_q0;
output  [10:0] edges_0_address1;
output   edges_0_ce1;
input  [63:0] edges_0_q1;
output  [10:0] edges_1_address0;
output   edges_1_ce0;
input  [63:0] edges_1_q0;
output  [10:0] edges_1_address1;
output   edges_1_ce1;
input  [63:0] edges_1_q1;
output  [7:0] level_address0;
output   level_ce0;
output   level_we0;
output  [7:0] level_d0;
input  [7:0] level_q0;
input  [7:0] empty;
output  [63:0] cnt_1_0_out;
output   cnt_1_0_out_ap_vld;
output  [63:0] cnt_2_0_out;
output   cnt_2_0_out_ap_vld;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg edges_0_ce0;
reg edges_0_ce1;
reg edges_1_ce0;
reg edges_1_ce1;
reg[7:0] level_address0;
reg level_ce0;
reg level_we0;
reg cnt_1_0_out_ap_vld;
reg cnt_2_0_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] cnt_2_0_reg_180;
reg   [63:0] e_1_0_load_reg_377;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln28_fu_232_p2;
reg   [0:0] icmp_ln28_reg_383;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln28_1_fu_269_p2;
reg   [0:0] icmp_ln28_1_reg_397;
reg   [7:0] level_addr_reg_411;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] level_addr_1_reg_416;
reg   [63:0] cnt_1_0_load_reg_421;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [0:0] grp_fu_213_p2;
wire   [63:0] add_ln34_fu_324_p2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
reg    ap_predicate_tran5to7_state5;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg   [63:0] ap_phi_reg_pp0_iter0_cnt_2_0_reg_180;
wire    ap_block_pp0_stage3_11001;
reg   [63:0] ap_phi_mux_cnt_2_1_phi_fu_194_p4;
wire   [63:0] add_ln34_1_fu_340_p2;
wire   [63:0] ap_phi_reg_pp0_iter1_cnt_2_1_reg_191;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_205_p4;
reg   [0:0] UnifiedRetVal_reg_201;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln29_fu_251_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln29_1_fu_284_p1;
wire   [63:0] tmp_dst_fu_293_p4;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_dst_1_fu_310_p4;
reg   [63:0] e_1_0_fu_64;
wire   [63:0] add_ln28_1_fu_330_p2;
reg   [63:0] cnt_1_0_fu_68;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire   [10:0] lshr_ln1_fu_241_p4;
wire   [11:0] trunc_ln28_fu_237_p1;
wire   [63:0] add_ln28_fu_257_p2;
wire   [11:0] add_ln28_2_fu_263_p2;
wire   [10:0] lshr_ln29_1_fu_274_p4;
wire   [0:0] trunc_ln28_1_fu_290_p1;
wire   [0:0] tmp_dst_1_fu_310_p3;
reg   [0:0] ap_return_preg;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_140;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 1'd0;
end

bfs_mux_21_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 64 ))
mux_21_64_1_1_U1(
    .din0(edges_0_q1),
    .din1(edges_1_q1),
    .din2(trunc_ln28_1_fu_290_p1),
    .dout(tmp_dst_fu_293_p4)
);

bfs_mux_21_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 64 ))
mux_21_64_1_1_U2(
    .din0(edges_0_q0),
    .din1(edges_1_q0),
    .din2(tmp_dst_1_fu_310_p3),
    .dout(tmp_dst_1_fu_310_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_205_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_reg_383 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        UnifiedRetVal_reg_201 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        UnifiedRetVal_reg_201 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_140)) begin
        if ((grp_fu_213_p2 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_cnt_2_0_reg_180 <= cnt_1_0_fu_68;
        end else if ((grp_fu_213_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_cnt_2_0_reg_180 <= add_ln34_fu_324_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        cnt_1_0_fu_68 <= cnt;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        cnt_1_0_fu_68 <= ap_phi_mux_cnt_2_1_phi_fu_194_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        e_1_0_fu_64 <= tmp_begin;
    end else if (((icmp_ln28_1_reg_397 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln28_reg_383 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        e_1_0_fu_64 <= add_ln28_1_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        cnt_1_0_load_reg_421 <= cnt_1_0_fu_68;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        cnt_2_0_reg_180 <= ap_phi_reg_pp0_iter0_cnt_2_0_reg_180;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_1_0_load_reg_377 <= e_1_0_fu_64;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln28_1_reg_397 <= icmp_ln28_1_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln28_reg_383 <= icmp_ln28_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_1_reg_397 == 1'd0) & (icmp_ln28_reg_383 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        level_addr_1_reg_416 <= tmp_dst_1_fu_310_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_reg_383 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        level_addr_reg_411 <= tmp_dst_fu_293_p4;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln28_reg_383 == 1'd1) | (ap_predicate_tran5to7_state5 == 1'b1))) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_383 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_205_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_205_p4 = UnifiedRetVal_reg_201;
    end
end

always @ (*) begin
    if (((icmp_ln28_1_reg_397 == 1'd0) & (icmp_ln28_reg_383 == 1'd0))) begin
        if ((grp_fu_213_p2 == 1'd0)) begin
            ap_phi_mux_cnt_2_1_phi_fu_194_p4 = cnt_2_0_reg_180;
        end else if ((grp_fu_213_p2 == 1'd1)) begin
            ap_phi_mux_cnt_2_1_phi_fu_194_p4 = add_ln34_1_fu_340_p2;
        end else begin
            ap_phi_mux_cnt_2_1_phi_fu_194_p4 = ap_phi_reg_pp0_iter1_cnt_2_1_reg_191;
        end
    end else begin
        ap_phi_mux_cnt_2_1_phi_fu_194_p4 = ap_phi_reg_pp0_iter1_cnt_2_1_reg_191;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_205_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln28_reg_383 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        cnt_1_0_out_ap_vld = 1'b1;
    end else begin
        cnt_1_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_383 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        cnt_2_0_out_ap_vld = 1'b1;
    end else begin
        cnt_2_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        edges_0_ce0 = 1'b1;
    end else begin
        edges_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        edges_0_ce1 = 1'b1;
    end else begin
        edges_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        edges_1_ce0 = 1'b1;
    end else begin
        edges_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        edges_1_ce1 = 1'b1;
    end else begin
        edges_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        level_address0 = level_addr_1_reg_416;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        level_address0 = level_addr_reg_411;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        level_address0 = tmp_dst_fu_293_p4;
    end else begin
        level_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        level_ce0 = 1'b1;
    end else begin
        level_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln28_reg_383 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (grp_fu_213_p2 == 1'd1)) | ((icmp_ln28_1_reg_397 == 1'd0) & (icmp_ln28_reg_383 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (grp_fu_213_p2 == 1'd1)))) begin
        level_we0 = 1'b1;
    end else begin
        level_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~(((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln28_reg_383 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_predicate_tran5to7_state5 == 1'b1))) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln28_reg_383 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_predicate_tran5to7_state5 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_1_fu_330_p2 = (e_1_0_load_reg_377 + 64'd2);

assign add_ln28_2_fu_263_p2 = (trunc_ln28_fu_237_p1 + 12'd1);

assign add_ln28_fu_257_p2 = (e_1_0_fu_64 + 64'd1);

assign add_ln34_1_fu_340_p2 = (cnt_2_0_reg_180 + 64'd1);

assign add_ln34_fu_324_p2 = (cnt_1_0_fu_68 + 64'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_140 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln28_reg_383 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter1_cnt_2_1_reg_191 = 'bx;

always @ (*) begin
    ap_predicate_tran5to7_state5 = ((icmp_ln28_1_reg_397 == 1'd1) & (icmp_ln28_reg_383 == 1'd0));
end

assign cnt_1_0_out = cnt_1_0_load_reg_421;

assign cnt_2_0_out = cnt_2_0_reg_180;

assign edges_0_address0 = zext_ln29_1_fu_284_p1;

assign edges_0_address1 = zext_ln29_fu_251_p1;

assign edges_1_address0 = zext_ln29_1_fu_284_p1;

assign edges_1_address1 = zext_ln29_fu_251_p1;

assign grp_fu_213_p2 = ((level_q0 == 8'd127) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_269_p2 = ((add_ln28_fu_257_p2 == tmp_end) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_232_p2 = ((e_1_0_fu_64 == tmp_end) ? 1'b1 : 1'b0);

assign level_d0 = empty;

assign lshr_ln1_fu_241_p4 = {{e_1_0_fu_64[11:1]}};

assign lshr_ln29_1_fu_274_p4 = {{add_ln28_2_fu_263_p2[11:1]}};

assign tmp_dst_1_fu_310_p3 = (trunc_ln28_1_fu_290_p1 ^ 1'd1);

assign trunc_ln28_1_fu_290_p1 = e_1_0_load_reg_377[0:0];

assign trunc_ln28_fu_237_p1 = e_1_0_fu_64[11:0];

assign zext_ln29_1_fu_284_p1 = lshr_ln29_1_fu_274_p4;

assign zext_ln29_fu_251_p1 = lshr_ln1_fu_241_p4;

endmodule //bfs_bfs_Pipeline_loop_neighbors
